'use strict';

/*global atom*/
var _require = require('atom');

const CompositeDisposable = _require.CompositeDisposable;


module.exports = {
  // add grammar watchers
  watchGrammars() {
    this.subscriptions = new CompositeDisposable(atom.grammars.onDidAddGrammar(this.patchGrammar.bind(this)), atom.grammars.onDidUpdateGrammar(this.patchGrammar.bind(this)));
    this.allGrammars(); // catch all grammars added before this package started.
  },

  stopWatchGrammars() {
    this.subscriptions.dispose();
  },

  allGrammars() {
    atom.grammars.grammars.forEach((val, idx, arr) => this.patchGrammar(arr[idx]));
  },

  patchGrammar(grammar) {
    if (this.shouldPatchGrammar(grammar)) {
      // traverse the patterns and repository grammar objects
      traverse(grammar.rawRepository);
      traverse(grammar.rawPatterns);
    }
  },

  shouldPatchGrammar(grammar) {
    const config = atom.config.get('language-babel.patchGrammars');
    return isArray(config) ? config.some(element => element === grammar.packageName) : false;
  }

};

function traverse(x) {
  isArray(x) ? traverseArray(x) : isObject(x) ? traverseObject(x) : null;
}

function isObject(o) {
  return typeof o === 'object' && o !== null;
}

function isArray(o) {
  return Object.prototype.toString.call(o) === '[object Array]';
}

function traverseArray(arr) {
  arr.forEach(function (x) {
    traverse(x);
  });
}

function traverseObject(obj) {
  for (var key in obj) {
    if (obj.hasOwnProperty(key)) {
      // if this is a include for language-javascript then patch it
      key === 'include' && obj[key] === 'source.js' ? obj[key] = 'source.js.jsx' : traverse(obj[key]);
    }
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhdGNoLWdyYW1tYXJzLmpzIl0sIm5hbWVzIjpbInJlcXVpcmUiLCJDb21wb3NpdGVEaXNwb3NhYmxlIiwibW9kdWxlIiwiZXhwb3J0cyIsIndhdGNoR3JhbW1hcnMiLCJzdWJzY3JpcHRpb25zIiwiYXRvbSIsImdyYW1tYXJzIiwib25EaWRBZGRHcmFtbWFyIiwicGF0Y2hHcmFtbWFyIiwiYmluZCIsIm9uRGlkVXBkYXRlR3JhbW1hciIsImFsbEdyYW1tYXJzIiwic3RvcFdhdGNoR3JhbW1hcnMiLCJkaXNwb3NlIiwiZm9yRWFjaCIsInZhbCIsImlkeCIsImFyciIsImdyYW1tYXIiLCJzaG91bGRQYXRjaEdyYW1tYXIiLCJ0cmF2ZXJzZSIsInJhd1JlcG9zaXRvcnkiLCJyYXdQYXR0ZXJucyIsImNvbmZpZyIsImdldCIsImlzQXJyYXkiLCJzb21lIiwiZWxlbWVudCIsInBhY2thZ2VOYW1lIiwieCIsInRyYXZlcnNlQXJyYXkiLCJpc09iamVjdCIsInRyYXZlcnNlT2JqZWN0IiwibyIsIk9iamVjdCIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiY2FsbCIsIm9iaiIsImtleSIsImhhc093blByb3BlcnR5Il0sIm1hcHBpbmdzIjoiOztBQUFBO2VBQzhCQSxRQUFRLE1BQVIsQzs7TUFBdkJDLG1CLFlBQUFBLG1COzs7QUFFUEMsT0FBT0MsT0FBUCxHQUFpQjtBQUNmO0FBQ0FDLGtCQUFnQjtBQUNkLFNBQUtDLGFBQUwsR0FBcUIsSUFBSUosbUJBQUosQ0FDbkJLLEtBQUtDLFFBQUwsQ0FBY0MsZUFBZCxDQUE4QixLQUFLQyxZQUFMLENBQWtCQyxJQUFsQixDQUF1QixJQUF2QixDQUE5QixDQURtQixFQUVuQkosS0FBS0MsUUFBTCxDQUFjSSxrQkFBZCxDQUFpQyxLQUFLRixZQUFMLENBQWtCQyxJQUFsQixDQUF1QixJQUF2QixDQUFqQyxDQUZtQixDQUFyQjtBQUlBLFNBQUtFLFdBQUwsR0FMYyxDQUtNO0FBQ3JCLEdBUmM7O0FBVWZDLHNCQUFvQjtBQUNsQixTQUFLUixhQUFMLENBQW1CUyxPQUFuQjtBQUNELEdBWmM7O0FBY2ZGLGdCQUFjO0FBQ1pOLFNBQUtDLFFBQUwsQ0FBY0EsUUFBZCxDQUF1QlEsT0FBdkIsQ0FBK0IsQ0FBQ0MsR0FBRCxFQUFNQyxHQUFOLEVBQVdDLEdBQVgsS0FDN0IsS0FBS1QsWUFBTCxDQUFrQlMsSUFBSUQsR0FBSixDQUFsQixDQURGO0FBR0QsR0FsQmM7O0FBb0JmUixlQUFhVSxPQUFiLEVBQXNCO0FBQ3BCLFFBQUksS0FBS0Msa0JBQUwsQ0FBd0JELE9BQXhCLENBQUosRUFBc0M7QUFDcEM7QUFDQUUsZUFBU0YsUUFBUUcsYUFBakI7QUFDQUQsZUFBU0YsUUFBUUksV0FBakI7QUFDRDtBQUNGLEdBMUJjOztBQTRCZkgscUJBQW1CRCxPQUFuQixFQUE0QjtBQUMxQixVQUFNSyxTQUFTbEIsS0FBS2tCLE1BQUwsQ0FBWUMsR0FBWixDQUFnQiw4QkFBaEIsQ0FBZjtBQUNBLFdBQU9DLFFBQVFGLE1BQVIsSUFDSEEsT0FBT0csSUFBUCxDQUFZQyxXQUFXQSxZQUFZVCxRQUFRVSxXQUEzQyxDQURHLEdBRUgsS0FGSjtBQUdEOztBQWpDYyxDQUFqQjs7QUFxQ0EsU0FBU1IsUUFBVCxDQUFrQlMsQ0FBbEIsRUFBcUI7QUFDbkJKLFVBQVFJLENBQVIsSUFBYUMsY0FBY0QsQ0FBZCxDQUFiLEdBQWdDRSxTQUFTRixDQUFULElBQWNHLGVBQWVILENBQWYsQ0FBZCxHQUFrQyxJQUFsRTtBQUNEOztBQUVELFNBQVNFLFFBQVQsQ0FBa0JFLENBQWxCLEVBQXFCO0FBQ25CLFNBQU8sT0FBT0EsQ0FBUCxLQUFhLFFBQWIsSUFBeUJBLE1BQU0sSUFBdEM7QUFDRDs7QUFFRCxTQUFTUixPQUFULENBQWlCUSxDQUFqQixFQUFvQjtBQUNsQixTQUFPQyxPQUFPQyxTQUFQLENBQWlCQyxRQUFqQixDQUEwQkMsSUFBMUIsQ0FBK0JKLENBQS9CLE1BQXNDLGdCQUE3QztBQUNEOztBQUVELFNBQVNILGFBQVQsQ0FBdUJiLEdBQXZCLEVBQTRCO0FBQzFCQSxNQUFJSCxPQUFKLENBQVksVUFBU2UsQ0FBVCxFQUFZO0FBQ3RCVCxhQUFTUyxDQUFUO0FBQ0QsR0FGRDtBQUdEOztBQUVELFNBQVNHLGNBQVQsQ0FBd0JNLEdBQXhCLEVBQTZCO0FBQzNCLE9BQUssSUFBSUMsR0FBVCxJQUFnQkQsR0FBaEIsRUFBcUI7QUFDbkIsUUFBSUEsSUFBSUUsY0FBSixDQUFtQkQsR0FBbkIsQ0FBSixFQUE2QjtBQUMzQjtBQUNBQSxjQUFRLFNBQVIsSUFBcUJELElBQUlDLEdBQUosTUFBYSxXQUFsQyxHQUNLRCxJQUFJQyxHQUFKLElBQVcsZUFEaEIsR0FFSW5CLFNBQVNrQixJQUFJQyxHQUFKLENBQVQsQ0FGSjtBQUdEO0FBQ0Y7QUFDRiIsImZpbGUiOiJwYXRjaC1ncmFtbWFycy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qZ2xvYmFsIGF0b20qL1xyXG5jb25zdCB7Q29tcG9zaXRlRGlzcG9zYWJsZX0gPSByZXF1aXJlKCdhdG9tJyk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICAvLyBhZGQgZ3JhbW1hciB3YXRjaGVyc1xyXG4gIHdhdGNoR3JhbW1hcnMoKSB7XHJcbiAgICB0aGlzLnN1YnNjcmlwdGlvbnMgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZShcclxuICAgICAgYXRvbS5ncmFtbWFycy5vbkRpZEFkZEdyYW1tYXIodGhpcy5wYXRjaEdyYW1tYXIuYmluZCh0aGlzKSksXHJcbiAgICAgIGF0b20uZ3JhbW1hcnMub25EaWRVcGRhdGVHcmFtbWFyKHRoaXMucGF0Y2hHcmFtbWFyLmJpbmQodGhpcykpXHJcbiAgICApO1xyXG4gICAgdGhpcy5hbGxHcmFtbWFycygpOyAvLyBjYXRjaCBhbGwgZ3JhbW1hcnMgYWRkZWQgYmVmb3JlIHRoaXMgcGFja2FnZSBzdGFydGVkLlxyXG4gIH0sXHJcblxyXG4gIHN0b3BXYXRjaEdyYW1tYXJzKCkge1xyXG4gICAgdGhpcy5zdWJzY3JpcHRpb25zLmRpc3Bvc2UoKTtcclxuICB9LFxyXG5cclxuICBhbGxHcmFtbWFycygpIHtcclxuICAgIGF0b20uZ3JhbW1hcnMuZ3JhbW1hcnMuZm9yRWFjaCgodmFsLCBpZHgsIGFycikgPT5cclxuICAgICAgdGhpcy5wYXRjaEdyYW1tYXIoYXJyW2lkeF0pXHJcbiAgICApO1xyXG4gIH0sXHJcblxyXG4gIHBhdGNoR3JhbW1hcihncmFtbWFyKSB7XHJcbiAgICBpZiAodGhpcy5zaG91bGRQYXRjaEdyYW1tYXIoZ3JhbW1hcikpIHtcclxuICAgICAgLy8gdHJhdmVyc2UgdGhlIHBhdHRlcm5zIGFuZCByZXBvc2l0b3J5IGdyYW1tYXIgb2JqZWN0c1xyXG4gICAgICB0cmF2ZXJzZShncmFtbWFyLnJhd1JlcG9zaXRvcnkpO1xyXG4gICAgICB0cmF2ZXJzZShncmFtbWFyLnJhd1BhdHRlcm5zKTtcclxuICAgIH1cclxuICB9LFxyXG5cclxuICBzaG91bGRQYXRjaEdyYW1tYXIoZ3JhbW1hcikge1xyXG4gICAgY29uc3QgY29uZmlnID0gYXRvbS5jb25maWcuZ2V0KCdsYW5ndWFnZS1iYWJlbC5wYXRjaEdyYW1tYXJzJyk7XHJcbiAgICByZXR1cm4gaXNBcnJheShjb25maWcpXHJcbiAgICAgID8gY29uZmlnLnNvbWUoZWxlbWVudCA9PiBlbGVtZW50ID09PSBncmFtbWFyLnBhY2thZ2VOYW1lKVxyXG4gICAgICA6IGZhbHNlO1xyXG4gIH1cclxuXHJcbn07XHJcblxyXG5mdW5jdGlvbiB0cmF2ZXJzZSh4KSB7XHJcbiAgaXNBcnJheSh4KSA/IHRyYXZlcnNlQXJyYXkoeCkgOiBpc09iamVjdCh4KSA/IHRyYXZlcnNlT2JqZWN0KHgpIDogbnVsbDtcclxufVxyXG5cclxuZnVuY3Rpb24gaXNPYmplY3Qobykge1xyXG4gIHJldHVybiB0eXBlb2YgbyA9PT0gJ29iamVjdCcgJiYgbyAhPT0gbnVsbDtcclxufVxyXG5cclxuZnVuY3Rpb24gaXNBcnJheShvKSB7XHJcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcclxufVxyXG5cclxuZnVuY3Rpb24gdHJhdmVyc2VBcnJheShhcnIpIHtcclxuICBhcnIuZm9yRWFjaChmdW5jdGlvbih4KSB7XHJcbiAgICB0cmF2ZXJzZSh4KTtcclxuICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gdHJhdmVyc2VPYmplY3Qob2JqKSB7XHJcbiAgZm9yICh2YXIga2V5IGluIG9iaikge1xyXG4gICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XHJcbiAgICAgIC8vIGlmIHRoaXMgaXMgYSBpbmNsdWRlIGZvciBsYW5ndWFnZS1qYXZhc2NyaXB0IHRoZW4gcGF0Y2ggaXRcclxuICAgICAga2V5ID09PSAnaW5jbHVkZScgJiYgb2JqW2tleV0gPT09ICdzb3VyY2UuanMnXHJcbiAgICAgICAgPyAob2JqW2tleV0gPSAnc291cmNlLmpzLmpzeCcpXHJcbiAgICAgICAgOiB0cmF2ZXJzZShvYmpba2V5XSk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==